{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getTags","gql","App","React","useState","walletAddress","setWalletAddress","hashtag","setHashtag","show","setShow","useLazyQuery","lazyReturn","loading","data","BuildTable","tableData","Table","tags","map","rows","width","height","src","nftImage","alt","nftName","nftDescription","timestamp","Container","className","Form","onSubmit","event","preventDefault","console","log","variables","tagger","fetchPolicy","Group","controlId","Label","Control","onChange","e","target","value","type","placeholder","Button","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","document","getElementById"],"mappings":"4SAMMA,EAAUC,YAAH,kTAgBE,SAASC,IACtB,MAA0CC,IAAMC,SAAS,MAAzD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA8BH,IAAMC,SAAS,MAA7C,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBL,IAAMC,UAAS,GAAvC,mBAAOK,EAAP,KAAaC,EAAb,KAGA,EAAwCC,YAAaX,GAArD,mBAAOY,EAAP,YAAqBC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,KAe9B,SAASC,EAAWC,GAChB,OACE,eAACC,EAAA,EAAD,CAAOR,KAAMA,EAAb,UACI,gCACE,+BACE,uCACA,oCACA,yCACA,wCACA,+CAGR,gCACGK,GAAQA,EAAKI,KAAKC,KAAI,SAACC,GAAD,OACrB,+BACE,6BAAI,qBAAKC,MAAM,QAAQC,OAAO,QAAQC,IAAKH,EAAKI,SAAUC,IAAI,qBAC9D,6BAAKL,EAAKM,UACV,6BAAKN,EAAKb,UACV,6BAAKa,EAAKO,iBACV,6BAAKP,EAAKQ,uBAQtB,OACE,eAACC,EAAA,EAAD,CAAWC,UAAU,MAArB,UACE,eAACC,EAAA,EAAD,CAAMC,SA1CV,SAAkBC,GAChBA,EAAMC,iBACNC,QAAQC,IAAI/B,GACZ8B,QAAQC,IAAI7B,GACZ4B,QAAQC,IAAIvB,GACZD,EAAW,CAAEyB,UAAW,CAAEC,OAAQjC,EAAeE,QAASA,GAAYgC,YAAa,aACnFJ,QAAQC,IAAItB,GACPD,GACHE,EAAWD,GAXUJ,GAAQ,IA6C7B,UACE,eAACqB,EAAA,EAAKS,MAAN,CAAYV,UAAU,OAAOW,UAAU,iBAAvC,UACE,cAACV,EAAA,EAAKW,MAAN,6BACA,cAACX,EAAA,EAAKY,QAAN,CACEC,SAAU,SAACC,GAAD,OAAOvC,EAAiBuC,EAAEC,OAAOC,QAC3CC,KAAK,OACLC,YAAY,sBAGhB,eAAClB,EAAA,EAAKS,MAAN,CAAYV,UAAU,OAAOW,UAAU,oBAAvC,UACE,cAACV,EAAA,EAAKW,MAAN,sBACA,cAACX,EAAA,EAAKY,QAAN,CACEC,SAAU,SAACC,GAAD,OAAOrC,EAAWqC,EAAEC,OAAOC,QACrCC,KAAK,GACLC,YAAY,eAGhB,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUH,KAAK,SAA/B,8BAIA,cAACjC,EAAD,OC7FR,IAYeqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCIRQ,EAAS,IAAIC,IAAa,CAC9BC,IAAK,2EACLC,MAAO,IAAIC,MAIbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,CAAgBR,OAAQA,EAAxB,SACA,cAAC,EAAD,QAGFS,SAASC,eAAe,SAM1BnB,M","file":"static/js/main.e8953811.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport React from \"react\";\nimport { Container, Button, Form, Modal, Table } from \"react-bootstrap\";\nimport { useLazyQuery, gql } from \"@apollo/client\";\n\nconst getTags = gql`\n  query tags($tagger: Bytes!, $hashtag: String!) {\n    tags(where: { tagger: $tagger, hashtag: $hashtag }) {\n      tagger\n      id\n      hashtagId\n      hashtagDisplayHashtag\n      hashtag\n      nftImage\n      nftName\n      nftDescription\n      timestamp\n    }\n  }\n`;\n\nexport default function App() {\n  const [walletAddress, setWalletAddress] = React.useState(null);\n  const [hashtag, setHashtag] = React.useState(null);\n  const [show, setShow] = React.useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const [lazyReturn, { loading, data }] = useLazyQuery(getTags);\n\n  function FindTags(event) {\n    event.preventDefault();\n    console.log(walletAddress);\n    console.log(hashtag);\n    console.log(loading);\n    lazyReturn({ variables: { tagger: walletAddress, hashtag: hashtag },  fetchPolicy: 'no-cache' });\n    console.log(data);\n    if (!loading) {\n      BuildTable(data);\n    }\n    handleShow();\n  }\n\n  function BuildTable(tableData) {\n      return (\n        <Table show={show}>\n            <thead>\n              <tr>\n                <th>Image</th>\n                <th>ID</th>\n                <th>HashTag</th>\n                <th>Tagger</th>\n                <th>Tag Date</th>\n              </tr>\n              </thead>\n        <tbody>\n          {data && data.tags.map((rows) => (\n            <tr>\n              <td><img width=\"125px\" height=\"125px\" src={rows.nftImage} alt=\"Italian Trulli\"/></td>\n              <td>{rows.nftName}</td>\n              <td>{rows.hashtag}</td>\n              <td>{rows.nftDescription}</td>\n              <td>{rows.timestamp}</td>\n            </tr>\n          ))}\n        </tbody>\n          </Table>\n      );\n  }\n\n  return (\n    <Container className=\"p-3\">\n      <Form onSubmit={FindTags}>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Wallet Address</Form.Label>\n          <Form.Control\n            onChange={(e) => setWalletAddress(e.target.value)}\n            type=\"text\"\n            placeholder=\"Wallet Address\"\n          />\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>HashTag</Form.Label>\n          <Form.Control\n            onChange={(e) => setHashtag(e.target.value)}\n            type=\"\"\n            placeholder=\"HashTag\"\n          />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Find Hashtags\n        </Button>\n      </Form>\n        <BuildTable />\n    </Container>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: 'https://api.thegraph.com/subgraphs/name/hashtag-protocol/hashtag-rinkeby',\n  cache: new InMemoryCache()\n});\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n    <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}